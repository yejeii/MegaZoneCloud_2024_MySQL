
- 이론 시험
    1. BDIA
        1회만 실시
        유형 : 구글폼, 객관식, 10문제
        평가일 : 7/16(예상일)
        
    2. MegaZoneCloud
        1회를 실시(1차, 2차)
        유형 : 구글폼, 객관식, 25문항
        평가일 : 1차(8/12), 2차(10/17)
        점수 반영 : 점수를 학점처럼 생각해야 함..
                  Pass(60점) 
                  59점부터는 재평가 최대 2번...
                  재평가 점수가 반영되는 것이아닌, 1회 점수가 반영됨!!
        시험 범위 : 배운 부분까지. 수업내용, 교재, 실습 모두 반영됨.


1. 데이터베이스 프로젝트
    1.1 진행과정
        계획 -> 분석 -> 설계 -> 테스트 -> 유지보수
    1.2 DB 프로젝트 진행과정
        - 업무 분석
        - 개념 DB 모델링
            E-R Model ( 개체(Entity) - 관계(Relationship) 모델 )
            
            개체(Entity) : 업무 수행을 위해 데이터로 관리되어야 하는 사람, 사물, 장소, 사건 등
            
            관계(Relationship) : 개체 간의 관계, 1:1, 1:다, 다:다
            
            정규화 : 데이터 중복을 제거. 속성이 본래의 개체에 위치시키도록 함
                    일반적으로 3정규화 까지 진행
            
        - 논리적 DB 모델링
            개념적 구조를 특정 RDBMS(MySQL) 가 처리할 수 있는 스키마를 생성하는 단계
            
            스키마 : 회사의 업무단위 별로 구분된 DB
            
                    Ex) 공장 관련 시스템 -> 미라콤(삼성 계열사, 스마트 팩토리)
                    
                    
                    클라우드화 시스템 -> SaaS화..
                    {
                    생산관리부서 : MES(제조실행시스템) + IoT(디지털 전환)
                    품질관리부서 : OQC(출하품질제어시스템)
                    창고관리부서 : WMS(창고관리시스템)
                    경영관리부서 : ERP(전사자원관리시스템)
                    연구소     : KMS(지식관리시스템)
                                BOM(설계관리시스템)
                                특허관리시스템
                                ...
                    해외법인    :
                    }
            
                    메가존 클라우드 : 제조 관련 부서, SAP 팀, 제조 IoT 팀...
            
        - 물리적 DB 모델링
            논리적 DB 모델링 단계에서 얻어지는 DB 스키마를 좀 더 효율적으로 구현하기 위한 작업과 
            구현하려는 DBMS 의 특성에 맞게 실제 DB 내의 개체들을 정의하는 단계
            
            더 효율적으로 구현에 대한 예
            
            - 데이터가 많이 적재 -> SQL 속도 저하 -> 속도 개선
              속도개선(검색 효율)을 위해서 Index 를 table 에 구축
            
            - 코드의 복잡도, 가독성, 유지보수, 접근제어(보안) 관련 개선
              View, Trigger, Stored procedure, Function
            
            - 반정규화
              시스템의 성능 향상을 위해 정규화에 위배되도록 하는 행위
              
            - 지나가는 이야기
              엔코아 컨설팅 ( 도메인 지식 + RDBMS 지식 + 기술사 + 경력 )
              
              
2. 쿼리 입문
    2-0. 세션(Session), 트랜잭션(Transaction), lock, key
        - 세션(Session)
            MySQL 을 사용하기 위해 로그인 한 상태 : "세션이 시작되었다" : SESSION OPEN
            로그인 한 상태에서 로그아웃을 한 상태   : "세션이 종료되었다" : SESSION CLOSED 
            
            session 과 TCP/IP 의 관계
            
            1. MySQL Terminal Client 2개 실행
                - 동일한 유저의 동일한 스키마를 사용하는 세션
                
            2. MySQL Session 2개, Client 2개 이니까
                - Session A(Client A, 화면 A), Session B(Client A, 화면 B)
            
            3. Session A 는 select 실행 완료.
               Session B 는 update 실행 완료.
            
            4. 위의 두 요청을 MySQL Server 에서 받아 처리후, 결과를 각각 요청한 쪽으로 전송
            
               여기서, MySQL Server 어떻게 구분해 결과를 전송하게 될까?
               
               TCP/IP(컴퓨터 주소), Port 정보(프로세스 구별 정보)가 필요
               
               
        
        - 트랜잭션(Transaction)
            최소한의 논리적인 작업 단위
            
            트랜잭션이 끝나는 경우 :
                ROLLBACK, COMMIT, SESSION CLOSED
                
                정상  : COMMIT
                비정상 : ROLLBACK, SESSION CLOSED
            
            생산실적 등록(마감처리)
            라인 반장님, 생산 부서 과장 -> 실적 등록 버튼 누름 -> 
            당일 실적 조회 -> 실적 처리할 것을 선택 -> 마감 확인 버튼 -> 
            tbl_production, tbl_oqc 수정 발생, 집계된 데이터를 procedure 로 전달 ->
            erp 접수 확인 -> 실패 or 성공
            
            관련 테이블 : tbl_production, tbl_oqc, procedure(erp 연동)
            
            생산실적 등록(마감처리) 트랜잭션
            {
            SELECT 
            UPDATE tbl_production sql
            UPDATE tbl_oqc sql
            CALL procedure
            }
        
        - Lock 
            row lock(행 단위)
                A : transaction 중
                B : update 중( A 의 transaction 종료될 때까지 대기 )
                DML 성능이 떨어지게 됨.
            
                발생시점 : 어떤 한 행에 UPDATE, DELETE 가 진행되었고, 트랜잭션을 완료하지 않은 경우.
                         COMMIT or ROLLBACK 을 해야 함
                
            table lock(테이블 단위)
                
                발생시점 : 테이블에 한 건 이상의 데이터가 있는 상태
                         모든 행에 UPDATE, DELETE 가 진행되었고, 트랜잭션을 완료하지 않은 경우.
                         COMMIT or ROLLBACK 을 해야 함
                         
        - key( 기본키, 외래키, 복합키 )
            기본키(PK) : 테이블의 각 행에 대한 고유 식별자의 역할
            외래키(FK) : 다른 테이블에서 참조하는 기본키가 칼럼인 경우
            복합키(CK) : 2개 이상의 칼럼을 결합해 고유한 값을 가지는 키
            자연키(NK) : 개체의 정보 중 고요한 값을 가져서 각 행마다 식별할 수 있는 의미를 가지는 키
            대리키     : 일련번호와 같은 가상의 값으로 기본키의 역할을 하는 칼럼
            
    
    2-1. sakila schema
         영화 DVD 대여 체인점을 설계한 DB
         
    2-2. 주요 테이블
         film       : 출시되어 대여할 수 있는 영화 DVD
         film_actor : 영화 출연 배우
         category   : 영화 장르
         language   : 영화 제작 언어
         customer   : DVD 고객(회원)
         payment    : DVD 대여료
         actor      : 배우
         inventory  : 대여가능 여부
         
    2-3. SQL 문장의 종류
        - DML(SElECT, INSERT, UPDATE, DELETE)
            SELECT.. 집합개념으로 작성하면 가독성이 좋음.
            
            - SELECT 절의 구문 형태
              SELECT    : 테이블의 컬럼, 스칼라(select 절)
                FROM    : 테이블, 뷰, inner 쿼리(select 절)
              WHERE     : 조건
              GROUP BY  : 데이터 그룹핑
              HAVING    : 그룹핑된 결과에서 추가적으로 조건 적용
              ORDER BY; : 정렬
        - DDL(CREATE, ALTER, DROP)
        - TCL(ROLLBACK, COMMIT)
    
    2-4. View
        - 가상의 테이블이라고 생각하고,
        - select 문장에 이름을 부여해서, 부여된 이름을 마치 테이블의 이름처럼 사용
        - 목적 
          SELECT 문장의 재사용
          긴 SQL 문장의 가독성을 위함
          실제 table 의 사용 제한을 줄 수 있음
          
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
            
            
            
        
        